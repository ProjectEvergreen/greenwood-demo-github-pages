{"dataType":"Map","value":[["/home/runner/work/greenwood-demo-github-pages/greenwood-demo-github-pages/.greenwood/929965909.js",{"src":null,"sourcePathURL":"file:///home/runner/work/greenwood-demo-github-pages/greenwood-demo-github-pages/.greenwood/929965909.js","type":"script","contents":"\n        globalThis.__GWD_BASE_PATH__ = '/greenwood-demo-github-pages';\n      ","optimizedFileName":"929965909.B1dfn2Ar.js","optimizedFileContents":"globalThis.__GWD_BASE_PATH__=\"/greenwood-demo-github-pages\";\n//# sourceMappingURL=929965909.B1dfn2Ar.js.map\n","rawAttributes":"data-gwd=\"base-path\""}],["/home/runner/work/greenwood-demo-github-pages/greenwood-demo-github-pages/src/styles/main.css",{"src":"../styles/main.css","sourcePathURL":"file:///home/runner/work/greenwood-demo-github-pages/greenwood-demo-github-pages/src/styles/main.css","type":"link","contents":":root, :host {\n  --color-white: white;\n  --color-accent: #3c384d;\n}\n\nbody {\n  padding: 0;\n  margin: 0;\n  border: 0;\n  font-family: 'Source Sans Pro', serif;\n  line-height: 1.4;\n  background: #fbfbfb;\n}\n\nheader, footer {\n  color: var(--color-white);\n  background-color: rgb(25, 42, 39);\n  text-align: center;\n  height: 50px;\n  padding: 15px 0 0;\n}\n\nfooter a {\n  margin: 7px 0 0 0;\n  text-decoration: underline;\n  color: var(--color-white);\n}\n\nheader a {\n  color: var(--color-white);\n}\n\na {\n  color: var(--color-accent);\n}\n\np {\n  margin: 20px auto;\n  width: 50%;\n}\n\nheader nav ul {\n  margin: 0;\n  padding: 0;\n  text-align: center;\n  font-size: 1.5rem;\n}\n\nheader nav ul li {\n  display: inline;\n}\n\nmain {\n  text-align: center;\n  min-height: 100vh;\n}\n\nh2 {\n  text-align: center;\n  text-decoration: underline;\n}\n\nbutton {\n  background: var(--color-accent);\n  color: var(--color-white);\n  padding: 1rem 2rem;\n  border: 0;\n  font-size: 1rem;\n  border-radius: 5px;\n  cursor: pointer;\n}\n\ninput {\n  padding: 1rem;\n  margin: 0 10px;\n  font-size: 16px;\n}\n\nlabel {\n  font-size: 1.35rem;\n}\n\narticle {\n  margin: 4rem 0;\n}\n\n.cards-container {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 1rem;\n  justify-content: center;\n  align-items: baseline;\n  margin: 2rem 0;\n}\n\n@media(max-width: 768px) {\n  button {\n    margin: 10px;\n  }\n}","optimizedFileName":"styles/main.2081904988.css","optimizedFileContents":":root,:host{--color-white:white;--color-accent:#3c384d;}body{padding:0;margin:0;border:0;font-family:'Source Sans Pro',serif;line-height:1.4;background:#fbfbfb;}header,footer{color:var(--color-white);background-color:rgb(25,42,39);text-align:center;height:50px;padding:15px 0 0;}footer a{margin:7px 0 0 0;text-decoration:underline;color:var(--color-white);}header a{color:var(--color-white)}a{color:var(--color-accent)}p{margin:20px auto;width:50%;}header nav ul{margin:0;padding:0;text-align:center;font-size:1.5rem;}header nav ul li{display:inline}main{text-align:center;min-height:100vh;}h2{text-align:center;text-decoration:underline;}button{background:var(--color-accent);color:var(--color-white);padding:1rem 2rem;border:0;font-size:1rem;border-radius:5px;cursor:pointer;}input{padding:1rem;margin:0 10px;font-size:16px;}label{font-size:1.35rem}article{margin:4rem 0}.cards-container{display:flex;flex-wrap:wrap;gap:1rem;justify-content:center;align-items:baseline;margin:2rem 0;}@media  (max-width:768px){button{margin:10px}}","rawAttributes":"rel=\"stylesheet\" href=\"../styles/main.css\""}],["/home/runner/work/greenwood-demo-github-pages/greenwood-demo-github-pages/.greenwood/1107222808.css",{"src":null,"sourcePathURL":"file:///home/runner/work/greenwood-demo-github-pages/greenwood-demo-github-pages/.greenwood/1107222808.css","type":"style","contents":"\n      h1 {\n        text-align: center;\n      }\n    ","optimizedFileName":"1107222808.css","optimizedFileContents":"h1{text-align:center}","optimizationAttr":null}],["/home/runner/work/greenwood-demo-github-pages/greenwood-demo-github-pages/src/components/card.js",{"src":"../components/card.js","sourcePathURL":"file:///home/runner/work/greenwood-demo-github-pages/greenwood-demo-github-pages/src/components/card.js","type":"script","contents":"export default class Card extends HTMLElement {\n\n  selectItem() {\n    const itemSelectedEvent = new CustomEvent(\"update-modal\", {\n      detail: {\n        content: `You selected the \"${this.title}\"`,\n      },\n    });\n\n    window.dispatchEvent(itemSelectedEvent);\n  }\n\n  connectedCallback() {\n    if (!this.shadowRoot) {\n      const thumbnail = this.getAttribute('thumbnail');\n      const title = this.getAttribute('title');\n      const template = document.createElement('template');\n\n      template.innerHTML = `\n        <style>\n          div {\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            gap: 0.5rem;\n            border: 1px solid #818181;\n            width: fit-content;\n            border-radius: 10px;\n            padding: 2rem 1rem;\n            height: 680px;\n            justify-content: space-between;\n            background-color: #fff;\n            overflow-x: hidden;\n          }\n          button {\n            background: var(--color-accent);\n            color: var(--color-white);\n            padding: 1rem 2rem;\n            border: 0;\n            font-size: 1rem;\n            border-radius: 5px;\n            cursor: pointer;\n          }\n          img {\n            max-width: 500px;\n            min-width: 500px;\n            width: 100%;\n          }\n          h3 {\n            font-size: 1.85rem;\n          }\n\n          @media(max-width: 768px) {\n            img {\n              max-width: 300px;\n              min-width: 300px;\n            }\n            div {\n              height: 500px;\n            }\n          }\n        </style>\n        <div>\n          <h3>${title}</h3>\n          <img src=\"${thumbnail}\" alt=\"${title}\" loading=\"lazy\" width=\"100%\">\n          <button onclick=\"this.parentNode.parentNode.host.selectItem()\">View Item Details</button>\n        </div>\n      `;\n      this.attachShadow({ mode: 'open' });\n      this.shadowRoot.appendChild(template.content.cloneNode(true));\n    }\n  }\n}\n\ncustomElements.define('app-card', Card);","optimizedFileName":"card.DOuMn1QV.js","optimizedFileContents":"class n extends HTMLElement{selectItem(){const n=new CustomEvent(\"update-modal\",{detail:{content:`You selected the \"${this.title}\"`}});window.dispatchEvent(n)}connectedCallback(){if(!this.shadowRoot){const n=this.getAttribute(\"thumbnail\"),t=this.getAttribute(\"title\"),e=document.createElement(\"template\");e.innerHTML=`\\n        <style>\\n          div {\\n            display: flex;\\n            flex-direction: column;\\n            align-items: center;\\n            gap: 0.5rem;\\n            border: 1px solid #818181;\\n            width: fit-content;\\n            border-radius: 10px;\\n            padding: 2rem 1rem;\\n            height: 680px;\\n            justify-content: space-between;\\n            background-color: #fff;\\n            overflow-x: hidden;\\n          }\\n          button {\\n            background: var(--color-accent);\\n            color: var(--color-white);\\n            padding: 1rem 2rem;\\n            border: 0;\\n            font-size: 1rem;\\n            border-radius: 5px;\\n            cursor: pointer;\\n          }\\n          img {\\n            max-width: 500px;\\n            min-width: 500px;\\n            width: 100%;\\n          }\\n          h3 {\\n            font-size: 1.85rem;\\n          }\\n\\n          @media(max-width: 768px) {\\n            img {\\n              max-width: 300px;\\n              min-width: 300px;\\n            }\\n            div {\\n              height: 500px;\\n            }\\n          }\\n        </style>\\n        <div>\\n          <h3>${t}</h3>\\n          <img src=\"${n}\" alt=\"${t}\" loading=\"lazy\" width=\"100%\">\\n          <button onclick=\"this.parentNode.parentNode.host.selectItem()\">View Item Details</button>\\n        </div>\\n      `,this.attachShadow({mode:\"open\"}),this.shadowRoot.appendChild(e.content.cloneNode(!0))}}}customElements.define(\"app-card\",n);export{n as default};\n//# sourceMappingURL=card.DOuMn1QV.js.map\n","rawAttributes":"type=\"module\" src=\"../components/card.js\""}],["/home/runner/work/greenwood-demo-github-pages/greenwood-demo-github-pages/src/components/modal.js",{"src":"../components/modal.js","sourcePathURL":"file:///home/runner/work/greenwood-demo-github-pages/greenwood-demo-github-pages/src/components/modal.js","type":"script","contents":"const template = document.createElement('template');\n\ntemplate.innerHTML = `\n  <style>\n    dialog {\n      border: 1px solid #818181;\n      text-align: center;\n      width: 40%;\n      border-radius: 10px;\n      padding: 2rem 1rem;\n      min-height: 200px;\n      background-color: #fff;\n      overflow-x: hidden;\n    }\n    \n    h3 {\n      font-size: 1.85rem;\n    }\n    \n    button {\n      background: var(--color-accent);\n      color: var(--color-white);\n      padding: 1rem 2rem;\n      border: 0;\n      font-size: 1rem;\n      border-radius: 5px;\n      cursor: pointer;\n    }\n    @media(max-width: 768px) {\n      dialog {\n        width: 80%;\n      }\n    }\n  </style>\n  <dialog>\n    <h3 id=\"content\"></h3>\n    <button autofocus>Close</button>\n  </dialog>\n`;\n\nexport default class Modal extends HTMLElement {\n\n  updateModal(detail) {\n    console.log(`selected item is => ${detail.content}`);\n    const modal = this.shadowRoot.querySelector('dialog');\n\n    modal.querySelector('#content').textContent = detail.content;\n    modal.showModal();\n  }\n\n  connectedCallback() {\n    if (!this.shadowRoot) {\n      this.attachShadow({ mode: 'open' });\n      this.shadowRoot.appendChild(template.content.cloneNode(true));\n    }\n\n    // setup event handlers for updating and closing the dialog\n    window.addEventListener('update-modal', (event) => {\n      this.updateModal(event.detail);\n    })\n\n    const modal = this.shadowRoot.querySelector('dialog');\n\n    modal.querySelector('button').addEventListener(\"click\", () => {\n      modal.close();\n    });\n  }\n}\n\ncustomElements.define('app-modal', Modal);","optimizedFileName":"modal.BpfmXzJK.js","optimizedFileContents":"const n=document.createElement(\"template\");n.innerHTML='\\n  <style>\\n    dialog {\\n      border: 1px solid #818181;\\n      text-align: center;\\n      width: 40%;\\n      border-radius: 10px;\\n      padding: 2rem 1rem;\\n      min-height: 200px;\\n      background-color: #fff;\\n      overflow-x: hidden;\\n    }\\n    \\n    h3 {\\n      font-size: 1.85rem;\\n    }\\n    \\n    button {\\n      background: var(--color-accent);\\n      color: var(--color-white);\\n      padding: 1rem 2rem;\\n      border: 0;\\n      font-size: 1rem;\\n      border-radius: 5px;\\n      cursor: pointer;\\n    }\\n    @media(max-width: 768px) {\\n      dialog {\\n        width: 80%;\\n      }\\n    }\\n  </style>\\n  <dialog>\\n    <h3 id=\"content\"></h3>\\n    <button autofocus>Close</button>\\n  </dialog>\\n';class e extends HTMLElement{updateModal(n){console.log(`selected item is => ${n.content}`);const e=this.shadowRoot.querySelector(\"dialog\");e.querySelector(\"#content\").textContent=n.content,e.showModal()}connectedCallback(){this.shadowRoot||(this.attachShadow({mode:\"open\"}),this.shadowRoot.appendChild(n.content.cloneNode(!0))),window.addEventListener(\"update-modal\",(n=>{this.updateModal(n.detail)}));const e=this.shadowRoot.querySelector(\"dialog\");e.querySelector(\"button\").addEventListener(\"click\",(()=>{e.close()}))}}customElements.define(\"app-modal\",e);export{e as default};\n//# sourceMappingURL=modal.BpfmXzJK.js.map\n","rawAttributes":"type=\"module\" src=\"../components/modal.js\""}]]}