diff --git a/node_modules/@greenwood/cli/src/commands/develop.js b/node_modules/@greenwood/cli/src/commands/develop.js
index a5ea59a..3c28226 100644
--- a/node_modules/@greenwood/cli/src/commands/develop.js
+++ b/node_modules/@greenwood/cli/src/commands/develop.js
@@ -6,11 +6,13 @@ const runDevServer = async (compilation) => {
   return new Promise(async (resolve, reject) => {
 
     try {
-      const { port } = compilation.config.devServer;
+      const { basePath, devServer } = compilation.config;
+      const { port } = devServer;
+      const postfixSlash = basePath === '' ? '' : '/';
 
       (await getDevServer(compilation)).listen(port, () => {
 
-        console.info(`Started local development server at localhost:${port}`);
+        console.info(`Started local development server at http://localhost:${port}${basePath}${postfixSlash}`);
 
         const servers = [...compilation.config.plugins.filter((plugin) => {
           return plugin.type === 'server';
diff --git a/node_modules/@greenwood/cli/src/commands/serve.js b/node_modules/@greenwood/cli/src/commands/serve.js
index f9c1dbf..d2721bd 100644
--- a/node_modules/@greenwood/cli/src/commands/serve.js
+++ b/node_modules/@greenwood/cli/src/commands/serve.js
@@ -6,13 +6,14 @@ const runProdServer = async (compilation) => {
   return new Promise(async (resolve, reject) => {
 
     try {
-      const port = compilation.config.port;
+      const { basePath, port } = compilation.config;
+      const postfixSlash = basePath === '' ? '' : '/';
       const hasApisDir = await checkResourceExists(compilation.context.apisDir);
       const hasDynamicRoutes = compilation.graph.find(page => page.isSSR && !page.data.static);
       const server = (hasDynamicRoutes && !compilation.config.prerender) || hasApisDir ? getHybridServer : getStaticServer;
 
       (await server(compilation)).listen(port, () => {
-        console.info(`Started server at localhost:${port}`);
+        console.info(`Started server at http://localhost:${port}${basePath}${postfixSlash}`);
       });
     } catch (err) {
       reject(err);
diff --git a/node_modules/@greenwood/cli/src/lib/templating-utils.js b/node_modules/@greenwood/cli/src/lib/templating-utils.js
index 9adbed1..e43ac64 100644
--- a/node_modules/@greenwood/cli/src/lib/templating-utils.js
+++ b/node_modules/@greenwood/cli/src/lib/templating-utils.js
@@ -59,7 +59,7 @@ async function getPageTemplate(filePath, context, template, contextPlugins = [])
 }
 
 /* eslint-disable-next-line complexity */
-async function getAppTemplate(pageTemplateContents, context, customImports = [], contextPlugins, enableHud, frontmatterTitle) {
+async function getAppTemplate(pageTemplateContents, context, customImports = [], contextPlugins, enableHud, frontmatterTitle, basePath) {
   const { templatesDir, userTemplatesDir } = context;
   const userAppTemplateUrl = new URL('./app.html', userTemplatesDir);
   const customAppTemplatesFromPlugins = await getCustomPageTemplatesFromPlugins(contextPlugins, 'app');
@@ -157,6 +157,11 @@ async function getAppTemplate(pageTemplateContents, context, customImports = [],
       ? appBody.replace(/<page-outlet><\/page-outlet>/, pageBody)
       : appBody;
 
+    const basePathTag = basePath === ''
+      ? ''
+      : `<base href="http://localhost:1984${basePath}/" target="_top"/>`;
+    console.log({ basePathTag });
+
     mergedTemplateContents = `<!DOCTYPE html>
       ${mergedHtml}
         <head>
diff --git a/node_modules/@greenwood/cli/src/lifecycles/bundle.js b/node_modules/@greenwood/cli/src/lifecycles/bundle.js
index e931847..fd9fc4c 100644
--- a/node_modules/@greenwood/cli/src/lifecycles/bundle.js
+++ b/node_modules/@greenwood/cli/src/lifecycles/bundle.js
@@ -47,7 +47,7 @@ async function optimizeStaticPages(compilation, plugins) {
     .filter(page => !page.isSSR || (page.isSSR && page.data.static) || (page.isSSR && compilation.config.prerender))
     .map(async (page) => {
       const { route, outputPath } = page;
-      const outputDirUrl = new URL(`.${route}`, outputDir);
+      const outputDirUrl = new URL(`.${outputPath.replace('index.html', '').replace('404.html', '')}`, outputDir);
       const url = new URL(`http://localhost:${compilation.config.port}${route}`);
       const contents = await fs.readFile(new URL(`./${outputPath}`, scratchDir), 'utf-8');
       const headers = new Headers({ 'Content-Type': 'text/html' });
@@ -70,7 +70,7 @@ async function optimizeStaticPages(compilation, plugins) {
       // clean up optimization markers
       const body = (await response.text()).replace(/data-gwd-opt=".*[a-z]"/g, '');
 
-      await fs.writeFile(new URL(`./${outputPath}`, outputDir), body);
+      await fs.writeFile(new URL(`.${outputPath}`, outputDir), body);
     })
   );
 }
diff --git a/node_modules/@greenwood/cli/src/lifecycles/config.js b/node_modules/@greenwood/cli/src/lifecycles/config.js
index dd8bff4..e9b9dd4 100644
--- a/node_modules/@greenwood/cli/src/lifecycles/config.js
+++ b/node_modules/@greenwood/cli/src/lifecycles/config.js
@@ -44,6 +44,7 @@ const defaultConfig = {
     extensions: []
   },
   port: 8080,
+  basePath: '',
   optimization: optimizations[0],
   interpolateFrontmatter: false,
   plugins: greenwoodPlugins,
@@ -75,7 +76,7 @@ const readAndMergeConfig = async() => {
 
       if (hasConfigFile) {
         const userCfgFile = (await import(configUrl)).default;
-        const { workspace, devServer, markdown, optimization, plugins, port, prerender, staticRouter, pagesDirectory, templatesDirectory, interpolateFrontmatter } = userCfgFile;
+        const { workspace, devServer, markdown, optimization, plugins, port, prerender, basePath, staticRouter, pagesDirectory, templatesDirectory, interpolateFrontmatter } = userCfgFile;
 
         // workspace validation
         if (workspace) {
@@ -188,6 +189,15 @@ const readAndMergeConfig = async() => {
           }
         }
 
+        if (basePath) {
+          // eslint-disable-next-line max-depth
+          if (typeof basePath !== 'string') {
+            reject(`Error: greenwood.config.js basePath must be a string.  Passed value was: ${basePath}`);
+          } else {
+            customConfig.basePath = basePath;
+          }
+        }
+
         if (pagesDirectory && typeof pagesDirectory === 'string') {
           customConfig.pagesDirectory = pagesDirectory;
         } else if (pagesDirectory) {
diff --git a/node_modules/@greenwood/cli/src/lifecycles/graph.js b/node_modules/@greenwood/cli/src/lifecycles/graph.js
index 486adb6..b883fee 100644
--- a/node_modules/@greenwood/cli/src/lifecycles/graph.js
+++ b/node_modules/@greenwood/cli/src/lifecycles/graph.js
@@ -9,13 +9,14 @@ const generateGraph = async (compilation) => {
 
   return new Promise(async (resolve, reject) => {
     try {
-      const { context } = compilation;
+      const { context, config } = compilation;
+      const { basePath } = config;
       const { apisDir, pagesDir, projectDirectory, userWorkspace } = context;
       let graph = [{
-        outputPath: 'index.html',
+        outputPath: '/index.html',
         filename: 'index.html',
         path: '/',
-        route: '/',
+        route: `${basePath}/`,
         id: 'index',
         label: 'Index',
         data: {},
@@ -202,10 +203,10 @@ const generateGraph = async (compilation) => {
               imports,
               resources: [],
               outputPath: route === '/404/'
-                ? '404.html'
+                ? '/404.html'
                 : `${route}index.html`,
               path: filePath,
-              route,
+              route: `${basePath}${route}`,
               template,
               title,
               isSSR: !isStatic
@@ -269,7 +270,7 @@ const generateGraph = async (compilation) => {
 
         graph = await checkResourceExists(pagesDir) ? await walkDirectoryForPages(pagesDir) : graph;
 
-        const has404Page = graph.filter(page => page.route === '/404/').length === 1;
+        const has404Page = graph.find(page => page.route.endsWith('/404/'));
 
         // if the _only_ page is a 404 page, still provide a default index.html
         if (has404Page && graph.length === 1) {
@@ -282,9 +283,9 @@ const generateGraph = async (compilation) => {
             ...graph,
             {
               ...oldGraph,
-              outputPath: '404.html',
+              outputPath: '/404.html',
               filename: '404.html',
-              route: '/404/',
+              route: `${basePath}/404/`,
               path: '404.html',
               id: '404',
               label: 'Not Found'
diff --git a/node_modules/@greenwood/cli/src/lifecycles/prerender.js b/node_modules/@greenwood/cli/src/lifecycles/prerender.js
index 5f4caf9..e9af4a6 100644
--- a/node_modules/@greenwood/cli/src/lifecycles/prerender.js
+++ b/node_modules/@greenwood/cli/src/lifecycles/prerender.js
@@ -6,7 +6,7 @@ import { WorkerPool } from '../lib/threadpool.js';
 // TODO a lot of these are duplicated in the build lifecycle too
 // would be good to refactor
 async function createOutputDirectory(route, outputDir) {
-  if (route !== '/404/' && !await checkResourceExists(outputDir)) {
+  if (!route.endsWith('/404/') && !await checkResourceExists(outputDir)) {
     await fs.mkdir(outputDir, {
       recursive: true
     });
@@ -59,15 +59,14 @@ async function preRenderCompilationWorker(compilation, workerPrerender) {
 
   for (const page of pages) {
     const { route, outputPath, resources } = page;
-    const outputDirUrl = new URL(`./${route}/`, scratchDir);
-    const outputPathUrl = new URL(`./${outputPath}`, scratchDir);
+    const outputPathUrl = new URL(`.${outputPath}`, scratchDir);
     const url = new URL(`http://localhost:${compilation.config.port}${route}`);
     const request = new Request(url);
 
     let body = await (await servePage(url, request, plugins)).text();
     body = await (await interceptPage(url, request, plugins, body)).text();
 
-    await createOutputDirectory(route, outputDirUrl);
+    await createOutputDirectory(route, new URL(outputPathUrl.href.replace('index.html', '')));
 
     const scripts = resources
       .map(resource => compilation.resources.get(resource))
@@ -106,8 +105,7 @@ async function preRenderCompilationCustom(compilation, customPrerender) {
 
   await renderer(compilation, async (page, body) => {
     const { route, outputPath } = page;
-    const outputDirUrl = new URL(`./${route}`, scratchDir);
-    const outputPathUrl = new URL(`./${outputPath}`, scratchDir);
+    const outputPathUrl = new URL(`.${outputPath}`, scratchDir);
 
     // clean up special Greenwood dev only assets that would come through if prerendering with a headless browser
     body = body.replace(/<script src="(.*lit\/polyfill-support.js)"><\/script>/, '');
@@ -119,7 +117,7 @@ async function preRenderCompilationCustom(compilation, customPrerender) {
     body = body.replace(/<script src="(.*webcomponents-bundle.js)"><\/script>/, '');
 
     await trackResourcesForRoute(body, compilation, route);
-    await createOutputDirectory(route, outputDirUrl);
+    await createOutputDirectory(route, new URL(outputPathUrl.href.replace('index.html', '')));
     await fs.writeFile(outputPathUrl, body);
 
     console.info('generated page...', route);
@@ -135,15 +133,14 @@ async function staticRenderCompilation(compilation) {
 
   await Promise.all(pages.map(async (page) => {
     const { route, outputPath } = page;
-    const outputDirUrl = new URL(`.${route}`, scratchDir);
-    const outputPathUrl = new URL(`./${outputPath}`, scratchDir);
+    const outputPathUrl = new URL(`.${outputPath}`, scratchDir);
     const url = new URL(`http://localhost:${compilation.config.port}${route}`);
     const request = new Request(url);
 
     let body = await (await servePage(url, request, plugins)).text();
     body = await (await interceptPage(url, request, plugins, body)).text();
 
-    await createOutputDirectory(route, outputDirUrl);
+    await createOutputDirectory(route, new URL(outputPathUrl.href.replace('index.html', '')));
     await fs.writeFile(outputPathUrl, body);
 
     console.info('generated page...', route);
diff --git a/node_modules/@greenwood/cli/src/lifecycles/serve.js b/node_modules/@greenwood/cli/src/lifecycles/serve.js
index da386ea..5f2335d 100644
--- a/node_modules/@greenwood/cli/src/lifecycles/serve.js
+++ b/node_modules/@greenwood/cli/src/lifecycles/serve.js
@@ -168,7 +168,7 @@ async function getDevServer(compilation) {
 async function getStaticServer(compilation, composable) {
   const app = new Koa();
   const { outputDir } = compilation.context;
-  const { port } = compilation.config;
+  const { port, basePath } = compilation.config;
   const standardResourcePlugins = compilation.config.plugins.filter((plugin) => {
     return plugin.type === 'resource' && plugin.isGreenwoodDefaultPlugin;
   });
@@ -186,7 +186,7 @@ async function getStaticServer(compilation, composable) {
           ? 'index.html'
           : isStatic
             ? matchingRoute.outputPath
-            : url.pathname;
+            : url.pathname.replace(basePath, '');
         const body = await fs.readFile(new URL(`./${pathname}`, outputDir), 'utf-8');
 
         ctx.set('Content-Type', 'text/html');
@@ -235,7 +235,7 @@ async function getStaticServer(compilation, composable) {
 
   app.use(async (ctx, next) => {
     try {
-      const url = new URL(`.${ctx.url}`, outputDir.href);
+      const url = new URL(`.${ctx.url.replace(basePath, '')}`, outputDir.href);
 
       if (await checkResourceExists(url)) {
         const resourcePlugins = standardResourcePlugins
diff --git a/node_modules/@greenwood/cli/src/plugins/resource/plugin-standard-html.js b/node_modules/@greenwood/cli/src/plugins/resource/plugin-standard-html.js
index 4b91d69..ea7e372 100644
--- a/node_modules/@greenwood/cli/src/plugins/resource/plugin-standard-html.js
+++ b/node_modules/@greenwood/cli/src/plugins/resource/plugin-standard-html.js
@@ -36,7 +36,7 @@ class StandardHtmlResource extends ResourceInterface {
   async serve(url) {
     const { config, context } = this.compilation;
     const { pagesDir, userWorkspace } = context;
-    const { interpolateFrontmatter } = config;
+    const { interpolateFrontmatter, basePath } = config;
     const { pathname } = url;
     const isSpaRoute = this.compilation.graph.find(node => node.isSPA);
     const matchingRoute = this.compilation.graph.find((node) => node.route === pathname) || {};
@@ -164,7 +164,7 @@ class StandardHtmlResource extends ResourceInterface {
       body = ssrTemplate ? ssrTemplate : await getPageTemplate(filePath, context, template, contextPlugins);
     }
 
-    body = await getAppTemplate(body, context, customImports, contextPlugins, config.devServer.hud, title);
+    body = await getAppTemplate(body, context, customImports, contextPlugins, config.devServer.hud, title, basePath);
     body = await getUserScripts(body, context);
 
     if (processedMarkdown) {
@@ -218,7 +218,7 @@ class StandardHtmlResource extends ResourceInterface {
   }
 
   async optimize(url, response) {
-    const { optimization } = this.compilation.config;
+    const { optimization, basePath } = this.compilation.config;
     const { pathname } = url;
     const pageResources = this.compilation.graph.find(page => page.outputPath === pathname || page.route === pathname).resources;
     let body = await response.text();
@@ -230,7 +230,7 @@ class StandardHtmlResource extends ResourceInterface {
       if (src) {
         if (type === 'script') {
           if (!optimizationAttr && optimization === 'default') {
-            const optimizedFilePath = `/${optimizedFileName}`;
+            const optimizedFilePath = `${basePath}/${optimizedFileName}`;
 
             body = body.replace(src, optimizedFilePath);
             body = body.replace('<head>', `
@@ -242,7 +242,7 @@ class StandardHtmlResource extends ResourceInterface {
 
             body = body.replace(`<script ${rawAttributes}></script>`, `
               <script ${isModule}>
-                ${optimizedFileContents.replace(/\.\//g, '/').replace(/\$/g, '$$$')}
+                ${optimizedFileContents.replace(/\.\//g, `${basePath}/`).replace(/\$/g, '$$$')}
               </script>
             `);
           } else if (optimizationAttr === 'static' || optimization === 'static') {
@@ -250,7 +250,7 @@ class StandardHtmlResource extends ResourceInterface {
           }
         } else if (type === 'link') {
           if (!optimizationAttr && (optimization !== 'none' && optimization !== 'inline')) {
-            const optimizedFilePath = `/${optimizedFileName}`;
+            const optimizedFilePath = `${basePath}/${optimizedFileName}`;
 
             body = body.replace(src, optimizedFilePath);
             body = body.replace('<head>', `
@@ -278,9 +278,9 @@ class StandardHtmlResource extends ResourceInterface {
           if (optimizationAttr === 'static' || optimization === 'static') {
             body = body.replace(`<script ${rawAttributes}>${contents.replace(/\.\//g, '/').replace(/\$/g, '$$$')}</script>`, '');
           } else if (optimizationAttr === 'none') {
-            body = body.replace(contents, contents.replace(/\.\//g, '/').replace(/\$/g, '$$$'));
+            body = body.replace(contents, contents.replace(/\.\//g, `${basePath}/`).replace(/\$/g, '$$$'));
           } else {
-            body = body.replace(contents, optimizedFileContents.replace(/\.\//g, '/').replace(/\$/g, '$$$'));
+            body = body.replace(contents, optimizedFileContents.replace(/\.\//g, `${basePath}/`).replace(/\$/g, '$$$'));
           }
         } else if (type === 'style') {
           body = body.replace(contents, optimizedFileContents);
diff --git a/node_modules/@greenwood/cli/src/plugins/resource/plugin-static-router.js b/node_modules/@greenwood/cli/src/plugins/resource/plugin-static-router.js
index 48af822..c0c3a12 100644
--- a/node_modules/@greenwood/cli/src/plugins/resource/plugin-static-router.js
+++ b/node_modules/@greenwood/cli/src/plugins/resource/plugin-static-router.js
@@ -56,30 +56,31 @@ class StaticRouterResource extends ResourceInterface {
 
   async optimize(url, response) {
     let body = await response.text();
+    const { basePath } = this.compilation.config;
     const { pathname } = url;
     const isStaticRoute = this.compilation.graph.find(page => page.route === pathname && !page.isSSR);
     const { outputDir } = this.compilation.context;
     const partial = body.match(/<body>(.*)<\/body>/s)[0].replace('<body>', '').replace('</body>', '');
-    const outputPartialDirUrl = new URL(`./_routes${url.pathname}`, outputDir);
+    const outputPartialDirUrl = new URL(`./_routes${url.pathname.replace(basePath, '')}`, outputDir);
     const outputPartialDirPathUrl = new URL(`file://${outputPartialDirUrl.pathname.split('/').slice(0, -1).join('/').concat('/')}`);
     let currentTemplate;
 
     const routeTags = this.compilation.graph
       .filter(page => !page.isSSR)
-      .filter(page => page.route !== '/404/')
+      .filter(page => !page.route.endsWith('/404/'))
       .map((page) => {
         const template = page.filename && page.filename.split('.').pop() === this.extensions[0]
           ? page.route
           : page.template;
         const key = page.route === '/'
           ? ''
-          : page.route.slice(0, page.route.lastIndexOf('/'));
+          : page.route.slice(0, page.route.lastIndexOf('/')).replace(basePath, '');
 
         if (pathname === page.route) {
           currentTemplate = template;
         }
         return `
-          <greenwood-route data-route="${page.route}" data-template="${template}" data-key="/_routes${key}/index.html"></greenwood-route>
+          <greenwood-route data-route="${page.route}" data-template="${template}" data-key="${basePath}/_routes${key}/index.html"></greenwood-route>
         `;
       });
 
